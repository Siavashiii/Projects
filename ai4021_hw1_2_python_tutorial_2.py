# -*- coding: utf-8 -*-
"""AI4021_HW1_2_Python_Tutorial_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TJIkyQ1uNZBYAc0Tqke3qMAFK6SB-hHS

**Problem 1:** Create a NumPy array of 20 random integers between 1 and 100. Calculate the mean, median, and standard deviation of the array.

> Indented block
"""

import numpy as np

# Step 1: Generate an array of 20 random integers between 1 and 100
random_array = np.random.randint(1, 101, 20)

# Step 2: Calculate the mean (average) of the array
mean_value = np.mean(random_array)

# Step 3: Calculate the median of the array
median_value = np.median(random_array)

# Step 4: Calculate the standard deviation of the array
std_deviation = np.std(random_array)

# Step 5: Print the results
print("Generated Array:", random_array)
print("Mean:", mean_value)
print("Median:", median_value)
print("Standard Deviation:", std_deviation)

"""**Problem 2:** Create a Pandas DataFrame with three columns - 'Name', 'Age', and 'City' - and at least five rows of data. Perform a basic data exploration by displaying the first 3 rows, the last 2 rows, and a summary of statistics for the 'Age' column."""

import pandas as pd

# Step 1: Create a dictionary with data
data = {
    'Name': ['MohammadJAVAD', 'Siavash', 'Amir', 'Ali', 'Morteza'],
    'Age': [25, 30, 22, 35, 28],
    'City': ['Tehran', 'Tehran', 'Shiraz', 'Mashhad', 'Hamedan']
}

# Step 2: Create a DataFrame from the dictionary
df = pd.DataFrame(data)

# Step 3: Display the first 3 rows
print("First 3 rows:")
print(df.head(3))

# Step 4: Display the last 2 rows
print("\nLast 2 rows:")
print(df.tail(2))

# Step 5: Display summary statistics for the 'Age' column
age_stats = df['Age'].describe()
print("\nSummary statistics for 'Age' column:")
print(age_stats)

"""**Problem 3:** Create a bar chart using Matplotlib to visualize the following data: Monthly sales for a store (January to May). Use appropriate labels and titles for the chart."""

import matplotlib.pyplot as plt

# Monthly sales data
months = ['January', 'February', 'March', 'April', 'May']
sales = [50000, 60000, 75000, 90000, 80000]

# Create a bar chart
plt.bar(months, sales, color='red')

# Add labels and title
plt.xlabel('Months')
plt.ylabel('Sales ($)')
plt.title('Monthly Sales for a Store (January to May)')

# Display the chart
plt.show()



"""**Problem 4:** Create two NumPy arrays, 'arr1' and 'arr2', both of size 5x5 with random integer values. Perform element-wise addition, subtraction, multiplication, and division between the two arrays."""

import numpy as np

# Generate two 5x5 arrays with random integer values
arr1 = np.random.randint(1, 100, size=(5, 5))
arr2 = np.random.randint(1, 100, size=(5, 5))

# Perform element-wise addition
addition_result = arr1 + arr2

# Perform element-wise subtraction
subtraction_result = arr1 - arr2

# Perform element-wise multiplication
multiplication_result = arr1 * arr2

# Perform element-wise division (handling division by zero)
division_result = np.where(arr2 != 0, arr1 / arr2, 0)

# Display the results
print("Array 1:\n", arr1)
print("\nArray 2:\n", arr2)
print("\nElement-wise Addition:\n", addition_result)
print("\nElement-wise Subtraction:\n", subtraction_result)
print("\nElement-wise Multiplication:\n", multiplication_result)
print("\nElement-wise Division:\n", division_result)

"""**Problem 5:** Given a Pandas DataFrame with information about employees, filter and display only the employees who are older than 30 years."""

import pandas as pd

# Assuming you have a DataFrame named employee_df
# Example DataFrame creation (replace this with your actual data)
data = {'Name': ['Sia', 'mamad', 'Ali', 'Reza'],
        'Age': [28, 32, 29, 35],
        'Department': ['AI', 'IT', 'Finance', 'Marketing']}

employee_df = pd.DataFrame(data)

# Filter and display employees older than 30
older_than_30_df = employee_df[employee_df['Age'] > 30]

# Display the result
print("Employees older than 30:\n", older_than_30_df)

"""**Problem 6:** Create a scatter plot using Matplotlib to visualize a dataset of 100 random (x, y) coordinates. Label the axes appropriately and give the plot a title."""

import matplotlib.pyplot as plt
import numpy as np

# Generate 100 random (x, y) coordinates
np.random.seed(50)  # for reproducibility
x_coordinates = np.random.rand(100)
y_coordinates = np.random.rand(100)

# Create a scatter plot
plt.scatter(x_coordinates, y_coordinates, c='green', marker='o')

# Add labels and title
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Scatter Plot of 100 Random (x, y) Coordinates')

# Show the plot
plt.show()

"""**Problem 7:** Create two NumPy matrices, 'matrix1' (2x3) and 'matrix2' (3x4), with random values. Perform matrix multiplication between the two matrices."""

import numpy as np

# Create two matrices with random values
matrix1 = np.random.rand(2, 3)
matrix2 = np.random.rand(3, 4)

# Perform matrix multiplication
result_matrix = np.dot(matrix1, matrix2)

# Display the matrices and the result
print("Matrix 1 (2x3):\n", matrix1)
print("\nMatrix 2 (3x4):\n", matrix2)
print("\nResult of Matrix Multiplication (2x4):\n", result_matrix)

print('---------------(Socond answer)-------------------')

import numpy as np

# Create two matrices with random values
matrix1 = np.random.rand(2, 3)
matrix2 = np.random.rand(3, 4)

# Perform matrix multiplication using @ operator
result_matrix = matrix1 @ matrix2

# Display the matrices and the result
print("Matrix 1 (2x3):\n", matrix1)
print("\nMatrix 2 (3x4):\n", matrix2)
print("\nResult of Matrix Multiplication (2x4):\n", result_matrix)

"""**Problem 8:** Given a Pandas DataFrame containing sales data, calculate and display the total sales for each product category."""

import pandas as pd

# Assuming you have a DataFrame named sales_df
# Example DataFrame creation (replace this with your actual data)
data = {'Product': ['A', 'B', 'C', 'A', 'B', 'C'],
        'Category': ['X', 'Y', 'X', 'Y', 'X', 'Y'],
        'Sales': [100, 150, 120, 80, 200, 180]}

sales_df = pd.DataFrame(data)

# Calculate total sales for each product category
total_sales_by_category = sales_df.groupby('Category')['Sales'].sum()

# Display the result
print("Total Sales by Product Category:\n", total_sales_by_category)


print('---------------(Socond answer)-------------------')


import pandas as pd

# Assuming you have a DataFrame named sales_df
# Example DataFrame creation (replace this with your actual data)
data = {'Product': ['A', 'B', 'C', 'A', 'B', 'C'],
        'Category': ['X', 'Y', 'X', 'Y', 'X', 'Y'],
        'Sales': [100, 150, 120, 80, 200, 180]}

sales_df = pd.DataFrame(data)

# Use pivot_table to calculate total sales for each product category
total_sales_by_category = sales_df.pivot_table(index='Category', values='Sales', aggfunc='sum')

# Display the result
print("Total Sales by Product Category:\n", total_sales_by_category)

"""**Problem 9:** Create a line chart using Matplotlib to visualize the population growth of a city over 10 years. Label the axes and provide a title."""

print('--------ANSWER WITH MAT ONLY--------')

import matplotlib.pyplot as plt

# Years from 1 to 10
years = list(range(1, 11))

# Population data (replace this with your actual population data)
population = [10000, 12000, 15000, 18000, 20000, 22000, 25000, 28000, 30000, 32000]

# Create a line chart
plt.plot(years, population, marker='o', linestyle='-', color='brown')

# Add labels and title
plt.xlabel('Years')
plt.ylabel('Population')
plt.title('City Population Growth Over 10 Years')

# Show the plot
plt.show()

print('--------ANSWER WITH MAT & NUMPY--------')

import matplotlib.pyplot as plt
import numpy as np

# Years from 1 to 10
years = np.arange(1, 11)

# Population data (replace this with your actual population data)
population = np.array([10000, 12000, 15000, 18000, 20000, 22000, 25000, 28000, 30000, 32000])

# Create a line chart
plt.plot(years, population, marker='o', linestyle='-', color='green')

# Add labels and title
plt.xlabel('Years')
plt.ylabel('Population')
plt.title('City Population Growth Over 10 Years')

# Show the plot
plt.show()

"""**Problem 10:** Given a Pandas DataFrame containing information about students, add a new column 'Grade' based on the following criteria:
* If 'Score' >= 90, Grade is 'A'
* If 'Score' >= 80, Grade is 'B'
* If 'Score' >= 70, Grade is 'C'
* If 'Score' < 70, Grade is 'D'
"""

print('-------ONLY PANDAS------')
import pandas as pd

# Assuming you have a DataFrame named students_df
# Example DataFrame creation (replace this with your actual data)
data = {'StudentID': [1, 2, 3, 4, 5],
        'Name': ['Siavash', 'Ali', 'Abbas', 'Mamad', 'Javad'],
        'Score': [95, 82, 75, 60, 88]}

students_df = pd.DataFrame(data)

# Add a new column 'Grade' based on the specified criteria
students_df['Grade'] = pd.cut(students_df['Score'], bins=[0, 70, 80, 90, float('inf')], labels=['D', 'C', 'B', 'A'])

# Display the result
print(students_df)

print('------- PANDAS & NUMPY ------')

import pandas as pd
import numpy as np

# Assuming you have a DataFrame named students_df
# Example DataFrame creation (replace this with your actual data)
data = {'StudentID': [1, 2, 3, 4, 5],
        'Name': ['Siavash', 'Ali', 'Abbas', 'Mamad', 'Javad'],
        'Score': [95, 82, 75, 60, 88]}

students_df = pd.DataFrame(data)

# Define conditions and corresponding grades
conditions = [students_df['Score'] >= 90,
              (students_df['Score'] >= 80) & (students_df['Score'] < 90),
              (students_df['Score'] >= 70) & (students_df['Score'] < 80),
              students_df['Score'] < 70]

grades = ['A', 'B', 'C', 'D']

# Use numpy's select to assign grades based on conditions
students_df['Grade'] = np.select(conditions, grades, default='F')

# Display the result
print(students_df)

"""**Problem 11:** You are given a dataset containing monthly sales data for three products (A, B, and C) over a two-year period. Your task is to perform various data analysis tasks using NumPy, Pandas, and Matplotlib.


*   Dataset:

```
import pandas as pd

data = {
    'Month': pd.date_range(start='2021-01-01', periods=24, freq='M'),
    'Product A Sales': [500, 480, 600, 750, 900, 850, 920, 1100, 1300, 1350, 1500, 1450, 1550, 1600, 1650, 1600, 1500, 1400, 1600, 1700, 1800, 1750, 1850, 1900],
    'Product B Sales': [300, 320, 400, 450, 500, 580, 700, 750, 820, 900, 950, 980, 1050, 1100, 1150, 1200, 1250, 1300, 1350, 1400, 1500, 1600, 1550, 1700],
    'Product C Sales': [200, 210, 250, 280, 320, 350, 380, 400, 420, 440, 460, 480, 500, 520, 540, 560, 580, 600, 620, 640, 660, 680, 700, 720]
}

sales_df = pd.DataFrame(data)
```
*  Tasks:
1. Calculate and display the total sales for each product over the two-year period.

2. Calculate and display the average monthly sales for each product.

3. Find the month with the highest sales for each product, and display the product and the sales value for that month.

4. Calculate and display the percentage change in sales for each product from January to December in the second year (2022).

5. Create a line chart using Matplotlib to visualize the monthly sales data for each product over the two-year period. Label the axes and provide a title for the chart.

6. Calculate the correlation between Product A and Product B sales. Is there a strong correlation between these two products? Display the correlation coefficient.

"""

import pandas as pd

data = {
    'Month': pd.date_range(start='2021-01-01', periods=24, freq='M'),
    'Product A Sales': [500, 480, 600, 750, 900, 850, 920, 1100, 1300, 1350, 1500, 1450, 1550, 1600, 1650, 1600, 1500, 1400, 1600, 1700, 1800, 1750, 1850, 1900],
    'Product B Sales': [300, 320, 400, 450, 500, 580, 700, 750, 820, 900, 950, 980, 1050, 1100, 1150, 1200, 1250, 1300, 1350, 1400, 1500, 1600, 1550, 1700],
    'Product C Sales': [200, 210, 250, 280, 320, 350, 380, 400, 420, 440, 460, 480, 500, 520, 540, 560, 580, 600, 620, 640, 660, 680, 700, 720]
}

sales_df = pd.DataFrame(data)

print('---task1----')

# Calculate and display total sales for each product
total_sales = sales_df[['Product A Sales', 'Product B Sales', 'Product C Sales']].sum()
print("Total Sales for Each Product:\n", total_sales)

print('---task2----')

# Calculate and display average monthly sales for each product
average_sales = sales_df[['Product A Sales', 'Product B Sales', 'Product C Sales']].mean()
print("\nAverage Monthly Sales for Each Product:\n", average_sales)

print('---task3----')

# Find the month with the highest sales for each product
max_sales_month = sales_df.iloc[sales_df[['Product A Sales', 'Product B Sales', 'Product C Sales']].idxmax().values]
print("\nMonth with Highest Sales for Each Product:\n", max_sales_month[['Month', 'Product A Sales', 'Product B Sales', 'Product C Sales']])

print('---task4----')

# Filter data for the second year (2022)
second_year_sales = sales_df[sales_df['Month'].dt.year == 2022]

# Calculate and display percentage change in sales for each product
percentage_change = second_year_sales[['Product A Sales', 'Product B Sales', 'Product C Sales']].pct_change().mean() * 100
print("\nPercentage Change in Sales from January to December (2022):\n", percentage_change)

print('---task5----')

import matplotlib.pyplot as plt

# Plotting line chart
plt.figure(figsize=(10, 6))
for product in ['Product A Sales', 'Product B Sales', 'Product C Sales']:
    plt.plot(sales_df['Month'], sales_df[product], label=product)

# Adding labels and title
plt.xlabel('Month')
plt.ylabel('Sales')
plt.title('Monthly Sales Data Over Two Years')
plt.legend()
plt.show()

print('---task6----')

# Calculate and display correlation between Product A and Product B sales
correlation_AB = sales_df['Product A Sales'].corr(sales_df['Product B Sales'])
print("\nCorrelation between Product A and Product B Sales:", correlation_AB)